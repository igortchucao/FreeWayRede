package FreeWay.Game;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;

import FreeWay.Entities.Player;
import FreeWay.Entities.PlayerData;
import FreeWay.Entities.Vehicles;
import FreeWay.Entities.VehiclesData;
import FreeWay.Graficos.Spritesheet;
import FreeWay.World.World;

public class Game extends Canvas implements KeyListener, Runnable {

	private static final long serialVersionUID = 1L;

	// DADOS DA JANELA DO JOGO
	public static JFrame frame;
	public static final int WIDTH = 350;
	public static final int HEIGHT = 190;
	public static final int SCALE = 4;
	public static final int TAM_IMG = 16;

	public static List<VehiclesData> vehiclesDatas;
	public static List<Vehicles> vehicles;

	public static List<Player> players;
	public List<PlayerData> playersDados;

	private Thread threadIn;
	private Thread threadPlayers;
	private Thread thread;
	public static boolean isConnected = false;
	public static boolean isRunning = false;
	private static Socket cliente;
	private static ObjectInputStream inObject;

	// DADOS DO MUNDO
	private BufferedImage image;
	public static World world = new World();
	public static Spritesheet spritesheet;// = new Spritesheet("/sprite2.png");

	// DADOS PARA O TICK
	private int frames = 0;
	private int maxFrames = 5;

	private MenuIniciar menu;

	// DADOS DA TELA JFRAME
	public void initFrame() {
		frame = new JFrame();
		frame.add(this);
		frame.setResizable(false);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}

	public Game() {
		// CRIA E ASSOCIA OS DADOS A TELA
		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));

		// SPRITES
		spritesheet = new Spritesheet("/sprite.png");

		// imagem do fundo do jogo. Sem ela o jogo fica no vacoo
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);

		// INSTANCIA OS VETORES
		players = new ArrayList<Player>();
		playersDados = new ArrayList<PlayerData>();

		vehiclesDatas = new ArrayList<VehiclesData>();
		vehicles = new ArrayList<Vehicles>();

		for (int i = 0; i < 10; i++) {
			vehiclesDatas.add(new VehiclesData());
			vehicles.add(new Vehicles());
		}
	}

	public static void main(String[] args) {
		Game game = new Game();
		game.initFrame();
		game.start();
	}

	public synchronized void start() {
		thread = new Thread(this);
		threadIn = new Thread(IN);
		threadPlayers = new Thread(inPlayers);
		thread.start();
		threadIn.start();
		threadPlayers.start();
		isRunning = true;
	}

	// PARA A THREAD
	public synchronized void stop() {
		isRunning = false;
		try {
			thread.join();
			threadIn.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public void connect() {
		// SE O JOGADOR NAO ESTIVER CONECTADO, CONECTE
		if (!isConnected) {
			try {
				cliente = new Socket("localhost", 80);
			} catch (IOException e) {
				e.printStackTrace();
			}
			isConnected = true;
		}
	}

	private Runnable inPlayers = new Runnable() {
		public void run() {
			while (true) {
				if (isConnected)
					inputServerPlayers();
				System.out.println("funciona");
			}
		}
	};
	
	private Runnable IN = new Runnable() {
		public void run() {
			while (true) {
				if (isConnected)
					inputServerVehicles();
				System.out.println("funciona");
			}
		}
	};

	private Runnable renderThread = new Runnable() {
		public void run() {
			while (isRunning)
				render();
		}
	};

	public void inputServerVehicles() {
		System.out.println("CLINTE: " + vehicles.get(1).dados.getPOS_X());
		// RECEBE AS POSIÇÕES DOS PLAYERS
		try {
			inObject = new ObjectInputStream(cliente.getInputStream());
			vehiclesDatas = (List<VehiclesData>) inObject.readObject();

			for (int i = 0; i < vehiclesDatas.size(); i++)
				vehicles.get(i).dados = vehiclesDatas.get(i);

		} catch (IOException | ClassNotFoundException e1) {
			e1.printStackTrace();
		}
	}
	
	public void inputServerPlayers() {
		System.out.println("CLINTE: " + vehicles.get(1).dados.getPOS_X());
		// RECEBE AS POSIÇÕES DOS PLAYERS
		try {
			inObject = new ObjectInputStream(cliente.getInputStream());
			playersDados = (List<PlayerData>) inObject.readObject();

			for (int i = 0; i < playersDados.size(); i++)
				players.get(i).dados = playersDados.get(i);

		} catch (IOException | ClassNotFoundException e1) {
			e1.printStackTrace();
		}
	}

	private void tick() {
		// ATUALIZA OS FRAMES DO JOGO
		frames++;
		if (frames > maxFrames) {
			frames = 0;
		}

		if (players.size() > 0) {
			players.get(0).tick();
		}

	}

	public void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		// RENDERIZAÇÃO DO FUNDO DO JOGO
		Graphics g = image.getGraphics();
		g.setColor(Color.gray);
		g.fillRect(0, 0, WIDTH, HEIGHT);

		g.dispose();
		g = bs.getDrawGraphics();
		g.drawImage(image, 0, 0, WIDTH * SCALE, HEIGHT * SCALE, null);
		for (int i = 0; i < vehicles.size(); i++) {
			Vehicles v = vehicles.get(i);
			v.render(g, i);
		}
		bs.show();
	}

	@Override
	public void run() {
		this.connect();
		long lastTime = System.nanoTime();

		// CONSTANTE TICK POR SEG
		double amountOfTicks = 1000.0;

		// CALCULO PARA O MOMENTO CERTO DE FAZER O UPDATE DO JOGO
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		double timer = System.currentTimeMillis();
		requestFocus();

		// LOOP DO JOGO
		while (isRunning) {
			if (!isConnected)
				connect();

			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			if (delta >= 1) {
				frames++;
				delta--;
				render();
			}

			if (System.currentTimeMillis() - timer >= 1000) {
				frames = 0;
				timer += 1000;
			}
		}
		stop();
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}

}